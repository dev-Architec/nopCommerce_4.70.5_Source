@model TopMenuModel

@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Topics
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

@functions {
    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {

        <li>
            <a href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">
                @lineModel.Category.Name
                @if (lineModel.Category.NumberOfProducts.HasValue)
                {
                    <text> </text>

                    @T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                }
                @if (lineModel.Category.SubCategories.Count > 0)
                {
                    <i class="fas fa-caret-down"></i>
                }
            </a>
            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                //responsive (all categories)
                lineModel.Category.SubCategories :
                //standard design (only categories with "IncludeInTopMenu")
                lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    <div class="sublist-toggle"><i class="fa-solid fa-chevron-right"></i></div>
                    <ul class="sublist @levelClass">
                        @foreach (var subCategory in subCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = subCategory,
                        Level = lineModel.Level + 1,
                        ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                    };
                            await CategoryLine(categoryLineModel);
                        }
                    </ul>
                }
            }
        </li>
    }
}

@{
    var rootCategoriesResponsive = Model.Categories.ToList();
    //name it "Categories" if we have only categories. Otherwise, "Menu"
    var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
    <div class="menu-toggle"><i class="fa-solid fa-bars"></i></div>
    <div class="menu-toggle close"><i class="fa-solid fa-xmark"></i></div>
    <ul class="top-menu mobile">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore, additionalData = Model })
        @if (Model.DisplayHomepageMenuItem)
        {
            <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
        }
        @if (!Model.UseAjaxMenu)
        {
            @foreach (var category in rootCategoriesResponsive)
            {
                var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category,
                        ResponsiveMobileMenu = true
                    };
                await CategoryLine(categoryLineModel);
            }

        }
        @foreach (var topic in Model.Topics)
        {
            <li><a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
        }
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
        }
        @if (Model.DisplayProductSearchMenuItem)
        {
            <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter, additionalData = Model })
    </ul>

    @if (Model.UseAjaxMenu)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                var localized_data = {
                    AjaxFailure: "@T("MainMenu.AjaxFailure")"
                };
                mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
            });
        </script>

        <script src="~/js/public.menu.js" asp-location="Footer"></script>

    }
    else
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                // Toggle the mobile menu on click
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').toggleClass('menu-active');
                    $(this).siblings('.header-menu').toggleClass('menu-headeactive');
                });

                // Toggle submenus and ensure only one is open at a time
                $('.top-menu.mobile .sublist-toggle').on('click', function () {
                    var $this = $(this);
                    var $submenu = $this.siblings('.sublist');

                    // If the submenu is already active, just toggle it
                    if ($submenu.hasClass('submenu-active')) {
                        $submenu.slideToggle('slow').removeClass('submenu-active');
                    } else {
                        // Close any other active submenu first
                        $('.sublist.submenu-active').slideUp('slow').removeClass('submenu-active');

                        // Open the clicked submenu
                        $submenu.slideToggle('slow').addClass('submenu-active');
                    }
                });
            });

        </script>

    }

    <script>
        $(document).ready(function () {
            $('#search-toggle').on('click', function (event) {
                event.stopPropagation();
                $('.search-box').slideToggle();
            });

            $(document).on('click', function (event) {
                if (!$(event.target).closest('.search-box, #search-toggle').length) {
                    $('.search-box').slideUp();
                }
            });

            $('.search-box').on('click', function (event) {
                event.stopPropagation();
            });
        });
    </script>

}


<div class="header-logo">
    @await Component.InvokeAsync(typeof(LogoViewComponent))
</div>

<ul class="top-menu notmobile">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
    @if (Model.DisplayHomepageMenuItem)
    {
        <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
    }
    @if (!Model.UseAjaxMenu)
    {
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
        @foreach (var category in rootCategories)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
            await CategoryLine(categoryLineModel);
        }

    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }


        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
    </ul>
    <div class="right-nav">   

    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
</ul>
<div class="right-nav">


    @{
        <div class="header-links-wrapper">
            @await Component.InvokeAsync(typeof(HeaderLinksViewComponent))
        </div>

    }

</div>


